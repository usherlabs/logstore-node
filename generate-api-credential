#!/usr/bin/env node

const ethers = require('ethers');
const { Base64 } = require('js-base64');

async function generateKeyPairAndSignature(privateKeyInput) {
	try {
		// Create wallet from provided private key or generate new random wallet
		const wallet = privateKeyInput
			? new ethers.Wallet(privateKeyInput)
			: ethers.Wallet.createRandom();
		const publicAddress = wallet.address;

		// Sign the public address using the private key
		const signature = await wallet.signMessage(publicAddress);

		// Base64 encode the signature before creating the auth string
		const base64Signature = Base64.encode(
			Buffer.from(signature.slice(2), 'hex'),
		);

		// Create the basic auth credential in the format expected by the middleware
		const basicAuthString = `${publicAddress}:${base64Signature}`;
		const basicAuthHeader = `basic ${Base64.encode(basicAuthString)}`;

		return {
			privateKey: wallet.privateKey,
			publicAddress,
			signature,
			basicAuthHeader,
		};
	} catch (error) {
		console.error('Error:', error.message);
		throw error;
	}
}

// Execute the function
(async () => {
	// Get private key from command line argument if provided
	const providedPrivateKey = process.argv[2];

	const { privateKey, publicAddress, signature, basicAuthHeader } =
		await generateKeyPairAndSignature(providedPrivateKey);

	console.log('Authentication Details:');
	console.log('Private Key:', privateKey);
	console.log('Public Address:', publicAddress);
	console.log('\nFor Basic Auth:');
	console.log('Authorization Header:', basicAuthHeader);
	console.log('\nFor Manual Construction:');
	console.log('Username:', publicAddress);
	console.log(
		'Password:',
		Base64.encode(Buffer.from(signature.slice(2), 'hex')),
	);
})();
