name: Deploy Docker Image

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - develop
      - dev

env:
  REGISTRY: ghcr.io

jobs:
  deploy:
    name: Deploy Docker Image
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        if: ${{ !env.ACT }}
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create image name
        run: |
          # if master, tag as latest
          tag=latest
          # if not master, tag as branch name
          if [ $GITHUB_REF != 'refs/heads/master' ]; then
              tag=$(echo $GITHUB_REF | sed 's/refs\/heads\///' | sed 's/\//-/')
          fi
          image_name=${{ env.REGISTRY }}/usherlabs/logstore-node:$tag
          # save for next step
          echo "image_name=$image_name" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          # we push only if env.ACT is not set
          push: ${{ env.ACT == '' }}
          tags: ${{ env.image_name }}
          platforms: linux/amd64, linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max


## Commenting
#  build:
#    name: Build Docker Image
#    runs-on: ubuntu-latest
#    permissions:
#      contents: read
#      packages: write
#
#    outputs:
#      image_name: ${{ env.IMAGE_NAME }}
#
#    strategy:
#      fail-fast: false
#      matrix:
#        platform:
#          - linux/amd64
#          - linux/arm64
#    steps:
#      - name: Create image name
#        run: |
#          # if master, tag as latest
#          tag=latest
#          # if not master, tag as branch name
#          if [ $GITHUB_REF != 'refs/heads/master' ]; then
#              tag=$(echo $GITHUB_REF | sed 's/refs\/heads\///' | sed 's/\//-/')
#          fi
#          image_name=${{ env.REGISTRY }}/usherlabs/logstore-node:$tag
#          # save for next step
#          echo "IMAGE_NAME=$image_name" >> $GITHUB_ENV
#
#      - name: Prepare
#        run: |
#          platform=${{ matrix.platform }}
#          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
#
#      - name: Checkout
#        uses: actions/checkout@v4
#        with:
#          submodules: true
#          token: ${{ secrets.GITHUB_TOKEN }}
#
#
#      - name: Docker meta
#        id: meta
#        uses: docker/metadata-action@v5
#        with:
#          images: ${{ env.IMAGE_NAME }}
#
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v3
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#
#      - name: Log in to the Container registry
#        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
#        if: ${{ !env.ACT }}
#        with:
#          registry: ${{ env.REGISTRY }}
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#
#      #      - name: Build and push amd64
#      #        uses: docker/build-push-action@v5
#      #        with:
#      #          context: .
#      #          builder: ${{ steps.setup-builder.outputs.name }}
#      #          # we push only if env.ACT is not set
#      #          push: ${{ env.ACT == '' }}
#      #          tags: ${{ env.image_name }}
#      #          platforms: linux/${{ matrix.architecture }}
#      #          cache-from: type=gha
#      #          cache-to: type=gha,mode=max
#
#
#      - name: Build and push by digest
#        id: build
#        uses: docker/build-push-action@v5
#        with:
#          context: .
#          platforms: ${{ matrix.platform }}
#          labels: ${{ steps.meta.outputs.labels }}
#          outputs: type=image,name=${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=true
#          cache-from: type=gha
#          cache-to: type=gha,mode=max
#
#      - name: Export digest
#        run: |
#          mkdir -p /tmp/digests
#          digest="${{ steps.build.outputs.digest }}"
#          touch "/tmp/digests/${digest#sha256:}"
#
#      - name: Upload digest
#        uses: actions/upload-artifact@v4
#        with:
#          name: digests-${{ env.PLATFORM_PAIR }}
#          path: /tmp/digests/*
#          if-no-files-found: error
#          retention-days: 1
#
#  merge:
#    runs-on: ubuntu-latest
#    needs:
#      - build
#    steps:
#      - name: Prepare
#        run: |
#          # setup env vars
#          echo "IMAGE_NAME=${{ needs.build.outputs.image_name }}" >> $GITHUB_ENV
#
#      - name: Download digests
#        uses: actions/download-artifact@v4
#        with:
#          path: /tmp/digests
#          pattern: digests-*
#          merge-multiple: true
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#
#      - name: Docker meta
#        id: meta
#        uses: docker/metadata-action@v5
#        with:
#          images: ${{ env.IMAGE_NAME }}
#
#      - name: Log in to the Container registry
#        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
#        if: ${{ !env.ACT }}
#        with:
#          registry: ${{ env.REGISTRY }}
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Create manifest list and push
#        working-directory: /tmp/digests
#        if: ${{ env.ACT == '' }}
#        run: |
#          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
#            $(printf '${{ env.IMAGE_NAME }}@sha256:%s ' *)
#
#      - name: Inspect image
#        run: |
#          docker buildx imagetools inspect ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
#
