// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "prover.proto" (package "socket", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Socket } from "./prover";
import type { ValidationResult } from "./prover";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { TlsProof } from "./prover";
import type { TlsProofFilter } from "./prover";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service socket.Socket
 */
export interface ISocketClient {
    /**
     * @generated from protobuf rpc: subscribeToProofs(socket.TlsProofFilter) returns (stream socket.TlsProof);
     */
    subscribeToProofs(input: TlsProofFilter, options?: RpcOptions): ServerStreamingCall<TlsProofFilter, TlsProof>;
    /**
     * @generated from protobuf rpc: validate(socket.TlsProof) returns (socket.ValidationResult);
     */
    validate(input: TlsProof, options?: RpcOptions): UnaryCall<TlsProof, ValidationResult>;
}
/**
 * @generated from protobuf service socket.Socket
 */
export class SocketClient implements ISocketClient, ServiceInfo {
    typeName = Socket.typeName;
    methods = Socket.methods;
    options = Socket.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: subscribeToProofs(socket.TlsProofFilter) returns (stream socket.TlsProof);
     */
    subscribeToProofs(input: TlsProofFilter, options?: RpcOptions): ServerStreamingCall<TlsProofFilter, TlsProof> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<TlsProofFilter, TlsProof>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: validate(socket.TlsProof) returns (socket.ValidationResult);
     */
    validate(input: TlsProof, options?: RpcOptions): UnaryCall<TlsProof, ValidationResult> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<TlsProof, ValidationResult>("unary", this._transport, method, opt, input);
    }
}
